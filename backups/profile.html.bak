<!-- Profile page for user account management -->
<!-- TITLE=_Profile - ROFLFaucet_ -->
<!-- DESC=_View and manage your ROFLFaucet profile, settings, and activity_ -->
<!-- KEYWORDS=_profile, account, settings, user, faucet, coins_ -->
<!-- STYLES=_styles/guest-base.css, styles/member-base.css_ -->
<!-- SCRIPTS=_ -->

<!-- include start header.html -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Profile - ROFLFaucet</title>
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><text y='.9em' font-size='90'>ðŸ¤£</text></svg>">
    <meta name="description" content="View and manage your ROFLFaucet profile, settings, and activity">
    
    <!-- Base Layout CSS -->
    <link rel="stylesheet" href="styles/styles.css">
    
    <!-- Additional page-specific styles -->
        <link rel="stylesheet" href="styles/guest-base.css">
    <link rel="stylesheet" href="styles/member-base.css">

    
    <!-- Site-wide scripts -->
    <script src="scripts/core/unified-balance.js"></script>
    <script src="scripts/core/site-utils.js"></script>
    <script src="scripts/core/gallery-system-simple.js"></script>
    <script src="scripts/core/jwt-simple.js"></script>
    
    <!-- Unified Balance System -->
    <script>console.log('ðŸ”§ Loading unified balance system...');</script>
</head>
<body>
    <!-- Header Navigation -->
    <header class="header">
        <div class="header-content">
            <div class="logo">
                <h1>ðŸ¤£ roflfaucet</h1>
            </div>
            
            <nav class="nav">
                <a href="index.html" class="nav-link">Faucet</a>
                
                <!-- Games Dropdown -->
                <div class="nav-dropdown">
                    <a href="#" class="nav-link dropdown-toggle">Games â–¼</a>
                    <div class="dropdown-menu">
                        <a href="slots.html" class="dropdown-item">ðŸŽ° Slots</a>
                        <a href="dice.html" class="dropdown-item">ðŸŽ² Roll of Chance</a>
                        <a href="wheel.html" class="dropdown-item">ðŸŽ¡ Wheel of Wealth</a>
                    </div>
                </div>
                
                <a href="profile.html" class="nav-link">Profile</a>
                <a href="about.html" class="nav-link">About</a>
            </nav>
            
            <!-- Hamburger Menu for Mobile -->
            <button class="hamburger-menu" id="mobile-menu-btn">
                <span></span>
                <span></span>
                <span></span>
            </button>
            
            <div class="header-auth">
                <button id="login-btn" class="header-auth-btn">Login</button>
            </div>
        </div>
    </header>
    
    <div class="container">
<!-- include end header.html -->

<!-- include start left-sidebar.html -->
        <aside class="left-sidebar">
            <!-- A-Ads placeholder - no min-width constraint for testing -->
            <div style="height: 250px; background: #e0e0e0; border: 2px dashed #999; display: flex; align-items: center; justify-content: center; text-align: center; max-width: 100%; box-sizing: border-box;">
                <div>
                    A-Ads Placeholder<br>
                    300x250px<br>
                    (scales to fit)
                </div>
            </div>
        </aside>
<!-- include end left-sidebar.html -->

        <main class="main-content">
            <div class="profile-container">
                
                <!-- Guest Notice -->
                <div id="guest-notice" class="guest-notice" style="display: none;">
                    <h3>ðŸšª Login Required</h3>
                    <p>You need to be logged in to view and edit your profile.</p>
                    <button onclick="showLoginDialog()" class="btn">Login Now</button>
                </div>
                
                <!-- Messages -->
                <div id="message" class="message"></div>
                
                <!-- Balance Display -->
                <div id="balance-section" style="display: none;">
                    <div class="balance-display">
                        <div class="balance-amount">
                            <span class="balance">0</span>
                            <span class="balance-currency currency">coins</span>
                        </div>
                        <div>Current Balance</div>
                    </div>
                </div>
                
                <!-- Profile Header -->
                <div id="profile-header" class="profile-header" style="display: none;">
                    <div class="avatar-section">
                        <div class="avatar-display" id="avatar-display">
                            ðŸ‘¤
                        </div>
                        <div class="avatar-upload">
                            <input type="file" id="avatar-input" accept="image/*">
                            <label for="avatar-input">Change Avatar</label>
                        </div>
                    </div>
                    
                    <div class="profile-info">
                        <h1 id="profile-username">Loading...</h1>
                        <p><strong>Member since:</strong> <span id="member-since">Loading...</span></p>
                        <div class="profile-stats">
                            <div class="stat">
                                <div class="stat-value" id="total-claims">0</div>
                                <div class="stat-label">Claims</div>
                            </div>
                            <div class="stat">
                                <div class="stat-value" id="total-games">0</div>
                                <div class="stat-label">Games</div>
                            </div>
                            <div class="stat">
                                <div class="stat-value" id="total-won">0</div>
                                <div class="stat-label">Won</div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Profile Tabs -->
                <div id="profile-tabs" style="display: none;">
                    <div class="profile-tabs">
                        <button class="tab-button active" onclick="showTab('basic')">Basic Info</button>
                        <button class="tab-button" onclick="showTab('preferences')">Preferences</button>
                        <button class="tab-button" onclick="showTab('activity')">Activity</button>
                    </div>
                    
                    <!-- Basic Info Tab -->
                    <div id="tab-basic" class="tab-content active">
                        <div class="profile-form">
                            <h3>Basic Information</h3>
                            <form id="basic-info-form" onsubmit="saveBasicInfo(event)">
                                <div class="form-row">
                                    <div class="form-group">
                                        <label for="display-name">Display Name</label>
                                        <input type="text" id="display-name" placeholder="Your display name">
                                    </div>
                                    <div class="form-group">
                                        <label for="email">Email</label>
                                        <input type="email" id="email" placeholder="your@email.com">
                                    </div>
                                </div>
                                
                                <div class="form-group">
                                    <label for="bio">Bio</label>
                                    <textarea id="bio" rows="3" placeholder="Tell us about yourself..."></textarea>
                                </div>
                                
                                <div class="form-row">
                                    <div class="form-group">
                                        <label for="location">Location</label>
                                        <input type="text" id="location" placeholder="City, Country">
                                    </div>
                                    <div class="form-group">
                                        <label for="website">Website</label>
                                        <input type="url" id="website" placeholder="https://your-website.com">
                                    </div>
                                </div>
                                
                                <button type="submit" class="btn">Save Changes</button>
                            </form>
                        </div>
                    </div>
                    
                    <!-- Preferences Tab -->
                    <div id="tab-preferences" class="tab-content">
                        <div class="profile-form">
                            <h3>Preferences</h3>
                            <form id="preferences-form" onsubmit="savePreferences(event)">
                                <div class="form-row">
                                    <div class="form-group">
                                        <label for="theme">Theme</label>
                                        <select id="theme">
                                            <option value="default">Default</option>
                                            <option value="dark">Dark</option>
                                            <option value="light">Light</option>
                                        </select>
                                    </div>
                                    <div class="form-group">
                                        <label for="timezone">Timezone</label>
                                        <select id="timezone">
                                            <option value="UTC">UTC</option>
                                            <option value="America/New_York">Eastern Time</option>
                                            <option value="America/Los_Angeles">Pacific Time</option>
                                            <option value="Europe/Berlin">Berlin</option>
                                            <option value="Asia/Tokyo">Tokyo</option>
                                        </select>
                                    </div>
                                </div>
                                
                                <div class="form-group">
                                    <label>
                                        <input type="checkbox" id="notifications-enabled">
                                        Enable notifications
                                    </label>
                                </div>
                                
                                <div class="form-group">
                                    <label>
                                        <input type="checkbox" id="public-profile">
                                        Make profile public
                                    </label>
                                </div>
                                
                                <button type="submit" class="btn">Save Preferences</button>
                            </form>
                        </div>
                    </div>
                    
                    <!-- Activity Tab -->
                    <div id="tab-activity" class="tab-content">
                        <div class="profile-form">
                            <h3>Recent Activity</h3>
                            <div id="recent-transactions">
                                <p>Loading recent activity...</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </main>

<!-- include start right-sidebar.html -->
        <aside class="right-sidebar">
            <!-- Random Giphy Image Container - TEMPORARILY DISABLED FOR TESTING -->
            <div id="sidebar-giphy-gallery-disabled" class="full-width" style="text-align: center; margin: 0; padding: 0;">
                <p style="color: #666; font-size: 14px; margin: 10px;">Gallery disabled during testing</p>
            </div>
        </aside>
<!-- include end right-sidebar.html -->

<!-- include start footer.html -->
    </div>
    
    <!-- Additional page-specific scripts -->
        <script src="-->"></script>

</body>
</html>
<!-- include end footer.html -->

<style>
.profile-container {
    max-width: 800px;
    margin: 0 auto;
    padding: 20px;
}

.profile-header {
    display: flex;
    align-items: center;
    gap: 20px;
    margin-bottom: 30px;
    padding: 20px;
    background: var(--card-bg, #f8f9fa);
    border-radius: 10px;
    border: 1px solid var(--border-color, #ddd);
}

.avatar-section {
    text-align: center;
}

.avatar-display {
    width: 120px;
    height: 120px;
    border-radius: 50%;
    object-fit: cover;
    border: 3px solid var(--primary-color, #007bff);
    background: var(--bg-secondary, #e9ecef);
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 48px;
    color: var(--text-muted, #6c757d);
}

.avatar-upload {
    margin-top: 10px;
}

.avatar-upload input[type="file"] {
    display: none;
}

.avatar-upload label {
    background: var(--primary-color, #007bff);
    color: white;
    padding: 8px 16px;
    border-radius: 5px;
    cursor: pointer;
    font-size: 12px;
    transition: background 0.3s;
}

.avatar-upload label:hover {
    background: var(--primary-hover, #0056b3);
}

.profile-info h1 {
    margin: 0 0 10px 0;
    color: var(--text-primary, #333);
}

.profile-stats {
    display: flex;
    gap: 20px;
    margin-top: 15px;
}

.stat {
    text-align: center;
}

.stat-value {
    font-size: 24px;
    font-weight: bold;
    color: var(--primary-color, #007bff);
}

.stat-label {
    font-size: 12px;
    color: var(--text-muted, #6c757d);
    text-transform: uppercase;
}

.profile-form {
    background: var(--card-bg, #fff);
    padding: 25px;
    border-radius: 10px;
    border: 1px solid var(--border-color, #ddd);
    margin-bottom: 20px;
}

.form-group {
    margin-bottom: 20px;
}

.form-group label {
    display: block;
    margin-bottom: 5px;
    font-weight: bold;
    color: var(--text-primary, #333);
}

.form-group input,
.form-group textarea,
.form-group select {
    width: 100%;
    padding: 10px;
    border: 2px solid var(--border-color, #ddd);
    border-radius: 5px;
    font-size: 14px;
    transition: border-color 0.3s;
    box-sizing: border-box;
}

.form-group input:focus,
.form-group textarea:focus,
.form-group select:focus {
    outline: none;
    border-color: var(--primary-color, #007bff);
}

.form-row {
    display: flex;
    gap: 15px;
}

.form-row .form-group {
    flex: 1;
}

.btn {
    background: var(--primary-color, #007bff);
    color: white;
    border: none;
    padding: 12px 24px;
    border-radius: 5px;
    cursor: pointer;
    font-size: 16px;
    transition: background 0.3s;
}

.btn:hover {
    background: var(--primary-hover, #0056b3);
}

.profile-tabs {
    display: flex;
    margin-bottom: 20px;
    border-bottom: 2px solid var(--border-color, #ddd);
}

.tab-button {
    background: none;
    border: none;
    padding: 15px 20px;
    cursor: pointer;
    font-size: 16px;
    color: var(--text-muted, #6c757d);
    border-bottom: 3px solid transparent;
    transition: all 0.3s;
}

.tab-button.active {
    color: var(--primary-color, #007bff);
    border-bottom-color: var(--primary-color, #007bff);
}

.tab-content {
    display: none;
}

.tab-content.active {
    display: block;
}

.guest-notice {
    background: #fff3cd;
    border: 1px solid #ffeaa7;
    padding: 15px;
    border-radius: 5px;
    margin-bottom: 20px;
    text-align: center;
}

.guest-notice h3 {
    margin: 0 0 10px 0;
    color: #856404;
}

.message {
    padding: 15px;
    margin: 15px 0;
    border-radius: 5px;
    display: none;
}

.message.success {
    background: #d4edda;
    color: #155724;
    border: 1px solid #c3e6cb;
}

.message.error {
    background: #f8d7da;
    color: #721c24;
    border: 1px solid #f5c6cb;
}

.balance-display {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 15px 20px;
    border-radius: 10px;
    text-align: center;
    margin-bottom: 20px;
}

.balance-amount {
    font-size: 28px;
    font-weight: bold;
}

.balance-currency {
    font-size: 16px;
    opacity: 0.9;
}
</style>

<script>
let currentProfile = null;

document.addEventListener('DOMContentLoaded', function() {
    // Wait a bit for JWT system to initialize
    setTimeout(() => {
        checkAuthAndLoadProfile();
    }, 500);
    
    // Listen for unified balance system updates
    if (window.unifiedBalance) {
        // No specific update callbacks needed for profile page
        console.log('ðŸ”§ Profile: Unified balance system ready');
    }
    
    // Avatar upload handling
    document.getElementById('avatar-input').addEventListener('change', handleAvatarUpload);
    
    // Also listen for unified balance system initialization
    const checkJWTReady = setInterval(() => {
        if (window.jwtSimpleFaucet && window.unifiedBalance) {
            clearInterval(checkJWTReady);
            checkAuthAndLoadProfile();
        }
    }, 200);
});

function checkAuthAndLoadProfile() {
    const isLoggedIn = window.unifiedBalance && window.unifiedBalance.isLoggedIn;
    
    if (isLoggedIn) {
        document.getElementById('guest-notice').style.display = 'none';
        document.getElementById('balance-section').style.display = 'block';
        document.getElementById('profile-header').style.display = 'flex';
        document.getElementById('profile-tabs').style.display = 'block';
        
        loadUserProfile();
    } else {
        document.getElementById('guest-notice').style.display = 'block';
        document.getElementById('balance-section').style.display = 'none';
        document.getElementById('profile-header').style.display = 'none';
        document.getElementById('profile-tabs').style.display = 'none';
    }
}

async function loadUserProfile() {
    try {
        // Load profile directly from API since we don't cache in unified balance system
            // Try to load from API
        const response = await fetch('api/user-data.php?action=all', {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${window.unifiedBalance.accessToken}`
                }
            });
            
            if (response.ok) {
                const result = await response.json();
            if (result.success) {
                currentProfile = result.profile;
                updateProfileDisplay(result);
            }
        }
    } catch (error) {
        console.error('Error loading profile:', error);
        showMessage('Failed to load profile data.', 'error');
    }
}

function updateProfileDisplay(data) {
    const profile = data.profile || data.profile_data || currentProfile;
    const balance = data.balance || data.balance_data?.balance;
    
    if (!profile) return;
    
    // Get username from profile or fallback to JWT data
    let displayUsername = profile.username;
    if (!displayUsername && window.unifiedBalance && window.unifiedBalance.isLoggedIn) {
        // Try to get username from JWT token
        const token = window.unifiedBalance.accessToken;
        if (token) {
            try {
                const payload = JSON.parse(atob(token.split('.')[1]));
                displayUsername = payload.username || payload.name || profile.user_id || 'User';
            } catch (e) {
                displayUsername = profile.user_id || 'User';
            }
        }
    }
    
    // Update header info
    document.getElementById('profile-username').textContent = displayUsername || 'Unknown User';
    
    const joinedDate = profile.joined_date || profile.created_at;
    if (joinedDate) {
        const date = new Date(joinedDate * 1000);
        document.getElementById('member-since').textContent = date.toLocaleDateString();
    }
    
    // Update stats
    if (profile.stats) {
        document.getElementById('total-claims').textContent = profile.stats.total_claims || 0;
        document.getElementById('total-games').textContent = profile.stats.total_games_played || 0;
        document.getElementById('total-won').textContent = profile.stats.total_won || 0;
    }
    
    // Update form fields
    document.getElementById('display-name').value = profile.username || '';
    document.getElementById('email').value = profile.email || '';
    document.getElementById('bio').value = profile.bio || '';
    document.getElementById('location').value = profile.location || '';
    document.getElementById('website').value = profile.website || '';
    
    // Update preferences
    if (profile.settings) {
        document.getElementById('theme').value = profile.settings.theme || 'default';
        document.getElementById('notifications-enabled').checked = profile.settings.notifications || false;
        document.getElementById('public-profile').checked = profile.settings.public_profile || false;
    }
    
    // Update avatar display if user has one
    if (profile.avatar) {
        const avatarDisplay = document.getElementById('avatar-display');
        avatarDisplay.innerHTML = `<img src="userdata/avatars/${profile.avatar}" alt="Avatar" style="width: 100%; height: 100%; object-fit: cover; border-radius: 50%;">`;
    }
}

function showTab(tabName) {
    // Hide all tabs
    document.querySelectorAll('.tab-content').forEach(tab => {
        tab.classList.remove('active');
    });
    
    // Remove active from all buttons
    document.querySelectorAll('.tab-button').forEach(btn => {
        btn.classList.remove('active');
    });
    
    // Show selected tab
    document.getElementById(`tab-${tabName}`).classList.add('active');
    event.target.classList.add('active');
    
    // Load tab-specific data
    if (tabName === 'activity') {
        loadRecentActivity();
    }
}

async function loadRecentActivity() {
    try {
        const response = await fetch('api/user-data.php?action=balance', {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${window.unifiedBalance.accessToken}`
            }
        });
        
        if (response.ok) {
            const result = await response.json();
            const transactions = result.transactions || [];
            const activityHtml = transactions.length > 0 ? 
                transactions.map(tx => `
                    <div style="padding: 10px; border-bottom: 1px solid #eee;">
                        <strong>${tx.description || tx.type}</strong><br>
                        <small>${new Date(tx.timestamp * 1000).toLocaleString()}</small><br>
                        <span style="color: ${tx.change > 0 ? 'green' : 'red'}">
                            ${tx.change > 0 ? '+' : ''}${tx.change} coins
                        </span>
                    </div>
                `).join('') :
                '<p>No recent activity.</p>';
            
            document.getElementById('recent-transactions').innerHTML = activityHtml;
        } else {
            throw new Error('Failed to fetch activity');
        }
    } catch (error) {
        document.getElementById('recent-transactions').innerHTML = '<p>Failed to load recent activity.</p>';
    }
}

async function saveBasicInfo(event) {
    event.preventDefault();
    
    const updates = {
        username: document.getElementById('display-name').value,
        email: document.getElementById('email').value,
        bio: document.getElementById('bio').value,
        location: document.getElementById('location').value,
        website: document.getElementById('website').value
    };
    
    try {
        const response = await fetch('api/user-data.php?action=update_profile', {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${window.unifiedBalance.accessToken}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(updates)
        });
        
        if (response.ok) {
            const result = await response.json();
            if (result.success) {
                showMessage('Profile updated successfully!', 'success');
                currentProfile = { ...currentProfile, ...updates };
            } else {
                showMessage('Failed to update profile.', 'error');
            }
        } else {
            showMessage('Failed to update profile.', 'error');
        }
    } catch (error) {
        console.error('Error saving profile:', error);
        showMessage('Error saving profile changes.', 'error');
    }
}

async function savePreferences(event) {
    event.preventDefault();
    
    const settings = {
        settings: {
            theme: document.getElementById('theme').value,
            timezone: document.getElementById('timezone').value,
            notifications: document.getElementById('notifications-enabled').checked,
            public_profile: document.getElementById('public-profile').checked
        }
    };
    
    try {
        const response = await fetch('api/user-data.php?action=update_profile', {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${window.unifiedBalance.accessToken}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(settings)
        });
        
        if (response.ok) {
            const result = await response.json();
            if (result.success) {
                showMessage('Preferences saved successfully!', 'success');
            } else {
                showMessage('Failed to save preferences.', 'error');
            }
        } else {
            showMessage('Failed to save preferences.', 'error');
        }
    } catch (error) {
        console.error('Error saving preferences:', error);
        showMessage('Error saving preferences.', 'error');
    }
}

async function handleAvatarUpload(event) {
    const file = event.target.files[0];
    if (!file) return;
    
    // Validate file
    if (!file.type.startsWith('image/')) {
        showMessage('Please select a valid image file.', 'error');
        return;
    }
    
    if (file.size > 2 * 1024 * 1024) { // 2MB limit
        showMessage('Image must be smaller than 2MB.', 'error');
        return;
    }
    
    // Preview the image immediately
    const reader = new FileReader();
    reader.onload = function(e) {
        const avatarDisplay = document.getElementById('avatar-display');
        avatarDisplay.innerHTML = `<img src="${e.target.result}" alt="Avatar" style="width: 100%; height: 100%; object-fit: cover; border-radius: 50%;">`;
    };
    reader.readAsDataURL(file);
    
    // Upload to server
    try {
        showMessage('Uploading avatar...', 'success');
        
        const formData = new FormData();
        formData.append('avatar', file);
        
        const token = window.unifiedBalance.accessToken;
        const response = await fetch('api/avatar-upload.php', {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${token}`
            },
            body: formData
        });
        
        const result = await response.json();
        
        if (result.success) {
            showMessage('Avatar uploaded successfully!', 'success');
            // Update the avatar display with the server URL
            const avatarDisplay = document.getElementById('avatar-display');
            avatarDisplay.innerHTML = `<img src="${result.avatar_url}" alt="Avatar" style="width: 100%; height: 100%; object-fit: cover; border-radius: 50%;">`;
        } else {
            showMessage(`Upload failed: ${result.error}`, 'error');
        }
    } catch (error) {
        console.error('Avatar upload error:', error);
        showMessage('Failed to upload avatar. Please try again.', 'error');
    }
}

function showMessage(text, type) {
    const messageEl = document.getElementById('message');
    messageEl.textContent = text;
    messageEl.className = `message ${type}`;
    messageEl.style.display = 'block';
    
    // Scroll to the message so user can see it
    messageEl.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
    
    setTimeout(() => {
        messageEl.style.display = 'none';
    }, 5000); // Increased from 3 to 5 seconds
}

function showLoginDialog() {
    if (window.jwtSimpleFaucet) {
        window.jwtSimpleFaucet.showLoginDialog();
    } else {
        alert('Please refresh the page and try again.');
    }
}
</script>
